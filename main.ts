//Global Variables
let hours   : number = 9;
let minutes : number = 12;
let ampm    : boolean = true;       // is it AM?
let adjust  : boolean = true;
let previousMillis : number = control.millis();
let hourHand : number[][][] =  [[[0,0,0,0,0],[0,0,0,0,0]], //00
                                [[0,0,0,0,0],[0,0,0,0,1]], //01
                                [[0,0,0,0,0],[0,0,0,1,0]], //02
                                [[0,0,0,0,0],[0,0,0,1,1]], //03
                                [[0,0,0,0,0],[0,0,1,0,0]], //04
                                [[0,0,0,0,0],[0,0,1,0,1]], //05
                                [[0,0,0,0,0],[0,0,1,1,0]], //06
                                [[0,0,0,0,0],[0,0,1,1,1]], //07
                                [[0,0,0,0,0],[0,1,0,0,0]], //08
                                [[0,0,0,0,0],[0,1,0,0,1]], //09
                                [[0,0,0,0,1],[0,0,0,0,0]], //10
                                [[0,0,0,0,1],[0,0,0,0,1]], //11
                                [[0,0,0,0,1],[0,0,0,1,0]], //12
                                [[0,0,0,0,1],[0,0,0,1,1]], //13
                                [[0,0,0,0,1],[0,0,1,0,0]], //14
                                [[0,0,0,0,1],[0,0,1,0,1]], //15
                                [[0,0,0,0,1],[0,0,1,1,0]], //16
                                [[0,0,0,0,1],[0,0,1,1,1]], //17
                                [[0,0,0,0,1],[0,1,0,0,0]], //18
                                [[0,0,0,0,1],[0,1,0,0,1]], //19
                                [[0,0,0,1,0],[0,0,0,0,0]], //20
                                [[0,0,0,1,0],[0,0,0,0,1]], //21
                                [[0,0,0,1,0],[0,0,0,1,0]], //22
                                [[0,0,0,1,0],[0,0,0,1,1]], //23
                                [[0,0,0,1,0],[0,0,1,0,0]]]; //24

let minHand : number[][][] =   [[[0,0,0,0,0],[0,0,0,0,0]], //00
                                [[0,0,0,0,0],[0,0,0,0,1]], //01
                                [[0,0,0,0,0],[0,0,0,1,0]], //02
                                [[0,0,0,0,0],[0,0,0,1,1]], //03
                                [[0,0,0,0,0],[0,0,1,0,0]], //04
                                [[0,0,0,0,0],[0,0,1,0,1]], //05
                                [[0,0,0,0,0],[0,0,1,1,0]], //06
                                [[0,0,0,0,0],[0,0,1,1,1]], //07
                                [[0,0,0,0,0],[0,1,0,0,0]], //08
                                [[0,0,0,0,0],[0,1,0,0,1]], //09
                                [[0,0,0,0,1],[0,0,0,0,0]], //10
                                [[0,0,0,0,1],[0,0,0,0,1]], //11
                                [[0,0,0,0,1],[0,0,0,1,0]], //12
                                [[0,0,0,0,1],[0,0,0,1,1]], //13
                                [[0,0,0,0,1],[0,0,1,0,0]], //14
                                [[0,0,0,0,1],[0,0,1,0,1]], //15
                                [[0,0,0,0,1],[0,0,1,1,0]], //16
                                [[0,0,0,0,1],[0,0,1,1,1]], //17
                                [[0,0,0,0,1],[0,1,0,0,0]], //18
                                [[0,0,0,0,1],[0,1,0,0,1]], //19
                                [[0,0,0,1,0],[0,0,0,0,0]], //20
                                [[0,0,0,1,0],[0,0,0,0,1]], //21
                                [[0,0,0,1,0],[0,0,0,1,0]], //22
                                [[0,0,0,1,0],[0,0,0,1,1]], //23
                                [[0,0,0,1,0],[0,0,1,0,0]], //24
                                [[0,0,0,1,0],[0,0,1,0,1]], //25
                                [[0,0,0,1,0],[0,0,1,1,0]], //26
                                [[0,0,0,1,0],[0,0,1,1,1]], //27
                                [[0,0,0,1,0],[0,1,0,0,0]], //28
                                [[0,0,0,1,0],[0,1,1,0,0]], //29
                                [[0,0,0,1,1],[0,0,0,0,0]], //30
                                [[0,0,0,1,1],[0,0,0,0,1]], //31
                                [[0,0,0,1,1],[0,0,0,1,0]], //32
                                [[0,0,0,1,1],[0,0,0,1,1]], //33
                                [[0,0,0,1,1],[0,0,1,0,0]], //34
                                [[0,0,0,1,1],[0,0,1,0,1]], //35
                                [[0,0,0,1,1],[0,0,1,1,0]], //36
                                [[0,0,0,1,1],[0,0,1,1,1]], //37
                                [[0,0,0,1,1],[0,1,0,0,0]], //38
                                [[0,0,0,1,1],[0,1,0,0,1]], //39
                                [[0,0,1,0,0],[0,0,0,0,0]], //40
                                [[0,0,1,0,0],[0,0,0,0,1]], //41
                                [[0,0,1,0,0],[0,0,0,1,0]], //42
                                [[0,0,1,0,0],[0,0,0,1,1]], //43
                                [[0,0,1,0,0],[0,0,1,0,0]], //44
                                [[0,0,1,0,0],[0,0,1,0,1]], //45
                                [[0,0,1,0,0],[0,0,1,1,0]], //46
                                [[0,0,1,0,0],[0,0,1,1,1]], //47
                                [[0,0,1,0,0],[0,1,0,0,0]], //48
                                [[0,0,1,0,0],[0,1,0,0,1]], //49
                                [[0,0,1,0,1],[0,0,0,0,0]], //50
                                [[0,0,1,0,1],[0,0,0,0,1]], //51
                                [[0,0,1,0,1],[0,0,0,1,0]], //52
                                [[0,0,1,0,1],[0,0,0,1,1]], //53
                                [[0,0,1,0,1],[0,0,1,0,0]], //54
                                [[0,0,1,0,1],[0,0,1,0,1]], //55
                                [[0,0,1,0,1],[0,0,1,1,0]], //56
                                [[0,0,1,0,1],[0,0,1,1,1]], //57
                                [[0,0,1,0,1],[0,1,0,0,0]], //58
                                [[0,0,1,0,1],[0,1,0,0,1]]]; //59

let ampmHand : number[][] =     [[1,1,0,0,0],[0,0,0,1,1]];  //AM, PM

input.onGesture(Gesture.Shake, () => {
    let time : string = (hours.toString() + ":" + minutes.toString()+" ");
    if (ampm){ time += "AM"} else { time += "PM"}
    basic.clearScreen();
    basic.showString(time);
    basic.clearScreen();
    pause(1000)
    adjust = true;
})

input.onButtonPressed(Button.AB, () => {
    ampm = !ampm;
    adjust = true;
})

input.onButtonPressed(Button.A, () => {
    if (hours < 23) {
        hours += 1;
    } else {
        hours = 0;
    }
    adjust = true;

})

input.onButtonPressed(Button.B, () => {
    if (minutes < 59) {
        minutes += 1;
    } else {
        minutes = 0;
    }
    adjust = true;

})

function showHours():void {
    // Show hours
    for (let i=0; i < 2; i++){
        for (let j=0; j < 5; j++){
            if (hourHand[hours][i][j]==0){
                led.unplot(i,j);
            } else {
                led.plot(i,j);
            }
        }
    }
}

function showMinutes():void {
    // Show minutes
    for (let i=0; i < 2; i++){
        for (let j=0; j < 5; j++){
            if (minHand[minutes][i][j]==0){
                led.unplot(i+2,j);
            } else {
                led.plot(i+2,j);
            }
        }
    }
}

function showAmPm():void{
    //show AM or PM
    let x : number
    if (ampm){
        x = 0;
    } else {
        x = 1;
    }
    for (let i=0; i < ampmHand[0].length; i++){
        if (ampmHand[x][i]==0){
            led.unplot(4, i);
        } else {
            led.plot(4,i);
        }
    } 
}

function incrementTime(){
    if (minutes < 59) {
        minutes += 1;
    } else {
        minutes = 0;
        // if (((hours<12)&&(!ampm)) || ((hours<24)&&(ampm))){  for future military time
        if (hours < 12){
            hours += 1;
        } else {
            hours = 1;
            ampm = !ampm
        }
        showHours();
        showAmPm();
    }
    showMinutes();
}

basic.clearScreen();

basic.forever(() => {
    if (adjust){
        //Show hours
        showHours();
        //Show Minutes
        showMinutes();
        //Show AM or PM 
        showAmPm();
        adjust = false;
    }
    if ((control.millis()-previousMillis) >= 60000) {
        previousMillis += 60000;
        incrementTime()
    }
})



